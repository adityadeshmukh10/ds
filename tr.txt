#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

#define N 10

int main(int argc, char* argv[]) {
    int pid, np, elements_per_process, n_elements_received;
    int a[N] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int a2[1000];
    MPI_Status status;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &pid);
    MPI_Comm_size(MPI_COMM_WORLD, &np);

    if (pid == 0) {
        int index, i;
        elements_per_process = N / np;

        // Send data to worker processes
        for (i = 1; i < np; i++) {
            index = i * elements_per_process;
            int count;
		  if (i == np - 1) {
    // If it's the last process, assign the remaining elements
    			count = N - index;
		  } else {
    // For all other processes, assign equal chunks
    			count = elements_per_process;
		  }


            MPI_Send(&count, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
            MPI_Send(&a[index], count, MPI_INT, i, 0, MPI_COMM_WORLD);
        }

        // Master/server computes its partial sum
        int master_sum = 0;
        
        for (i = 0; i < elements_per_process; i++) {
            master_sum += a[i];
        }

        // Display master/server partial sum
        printf("Server (process 0) computed partial sum: %d\n", master_sum);

        // Collect and add partial sums from worker processes
        int tmp, total_sum = master_sum;
        for (i = 1; i < np; i++) {
            MPI_Recv(&tmp, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);
            int sender = status.MPI_SOURCE;
            printf("Partial sum received from process %d: %d\n", sender, tmp);
            total_sum += tmp;
        }

        printf("Total sum of array: %d\n", total_sum);
    } else {
        // Receive number of elements
        MPI_Recv(&n_elements_received, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);
        // Receive the actual elements
        MPI_Recv(a2, n_elements_received, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);

        // Compute partial sum
        int partial_sum = 0;
        for (int i = 0; i < n_elements_received; i++) {
            partial_sum += a2[i];
        }

        printf("Process %d computed partial sum: %d\n", pid, partial_sum);
        // Send the partial sum back to master
        MPI_Send(&partial_sum, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}